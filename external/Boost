# -*- mode: cmake -*-


set(Boost_USE_STATIC_LIBS    OFF)
#set(Boost_USE_MULTITHREADED  OFF)
#set(Boost_USE_STATIC_RUNTIME OFF)

# Limit scope of the search if BOOST_ROOT or BOOST_INCLUDEDIR is provided.
if (BOOST_ROOT OR BOOST_INCLUDEDIR)
  set(Boost_NO_SYSTEM_PATHS TRUE)
endif()
  
# Check for Boost
find_package(Boost 1.33 COMPONENTS unit_test_framework)


if (Boost_FOUND)

  # Perform a compile check with Boost
  list(APPEND CMAKE_REQUIRED_INCLUDES ${Boost_INCLUDE_DIR})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${Boost_LIBRARIES})
  if (BOOST_UNIT_TEST_FRAMEWORK_FOUND AND NOT Boost_USE_STATIC_LIBS)
    set(BOOST_TEST_DYN_LINK 1)
    CHECK_CXX_SOURCE_COMPILES(
      "
      #define BOOST_TEST_MAIN main_tester
      #define BOOST_TEST_DYN_LINK 1
      #ifdef BOOST_TEST_DYN_LINK
      
      BOOST_AUTO_TEST_CASE( tester )
      {
        BOOST_CHECK( true );
      }
      
      "  BOOST_COMPILES)
  else()
    CHECK_CXX_SOURCE_COMPILES(
      "
      #define BOOST_TEST_MAIN main_tester
      #include <boost/test/included/unit_test.hpp>
      
      BOOST_AUTO_TEST_CASE( tester )
      {
        BOOST_CHECK( true );
      }
      
      "  BOOST_COMPILES)
  endif()

  if (NOT BOOST_COMPILES)
    message(FATAL_ERROR "Could not compile Boost test program")
  endif()
  
else()

  if(TA_EXPERT)

    message("** BOOST was not explicitly set")
    message("** Downloading and building Boost is explicitly disabled in EXPERT mode")

  else()

    # Set source and build path for Boost in the TiledArray Project
    set(EXTERNAL_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external/src/boost)
    set(EXTERNAL_BUILD_DIR  ${PROJECT_BINARY_DIR}/external/build/boost)

    # Set the external source
    if (EXISTS ${EXTERNAL_SOURCE_DIR}/boost.tar.gz)
      # Use local file
      set(BOOST_URL ${EXTERNAL_SOURCE_DIR}/boost.tar.gz)
      set(BOOST_URL_HASH "")
    else()
      # Downlaod remote file
      set(BOOST_URL
          http://downloads.sourceforge.net/project/boost/boost/1.53.0/boost_1_53_0.tar.gz)
      set(BOOST_URL_HASH MD5=57a9e2047c0f511c4dfcf00eb5eb2fbb)
    endif()

    message("** Will build Boost from ${BOOST_URL}")

    ExternalProject_Add(
      boost
      PREFIX ${EXTERNAL_BUILD_DIR}/boost
      URL ${BOOST_URL}
      URL_HASH ${BOOST_URL_HASH}
      SOURCE_DIR ${EXTERNAL_SOURCE_DIR}
      BINARY_DIR ${EXTERNAL_BUILD_DIR}
      CONFIGURE_COMMAND ""
      BUILD_COMMAND ""
      INSTALL_COMMAND ""
      )

    add_dependencies(External boost)
    install(
      DIRECTORY ${EXTERNAL_SOURCE_DIR}/boost
      DESTINATION ${CMAKE_INSTALL_PREFIX}/include/
      )
    set(Boost_INCLUDE_DIRS ${EXTERNAL_SOURCE_DIR}/boost)

  endif()

endif()

include_directories(${Boost_INCLUDE_DIRS})

message(STATUS "Boost include dir: ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost libraries: ${Boost_LIBRARIES}")

