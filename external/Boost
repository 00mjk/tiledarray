# -*- mode: cmake -*-

if (DEFINED BOOST)

  set(Boost_USE_STATIC_LIBS    OFF)
  #set(Boost_USE_MULTITHREADED  OFF)
  #set(Boost_USE_STATIC_RUNTIME OFF)

  set(BOOST_ROOT ${BOOST})
  set(Boost_NO_SYSTEM_PATHS TRUE)
  
  # Check for non-threaded Boost
  find_package(Boost 1.33 REQUIRED)
  find_package(Boost COMPONENTS unit_test_framework)
  if (BOOST_UNIT_TEST_FRAMEWORK_FOUND)
    set(BOOST_TEST_DYN_LINK 1)
  endif()

elseif (TA_EXPERT)

  message("** BOOST was not explicitly set")
  message("** Downloading and building Boost is explicitly disabled in EXPERT mode")

else()

  set(EXTERNAL_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external)
  set(EXTERNAL_BUILD_DIR ${PROJECT_BINARY_DIR}/external/build)

  set(BOOST_URL
    http://downloads.sourceforge.net/project/boost/boost/1.53.0/boost_1_53_0.tar.gz)
  set(BOOST_URL_HASH MD5=57a9e2047c0f511c4dfcf00eb5eb2fbb)

  if (EXISTS ${EXTERNAL_SOURCE_DIR}/boost.tar.gz)
    set(BOOST_URL ${EXTERNAL_SOURCE_DIR}/boost.tar.gz)
    set(BOOST_URL_HASH "")
  endif()

  message("** Will build Boost from ${BOOST_URL}")

  ExternalProject_Add(
    boost
    PREFIX ${EXTERNAL_BUILD_DIR}/boost
    URL ${BOOST_URL}
    URL_HASH ${BOOST_URL_HASH}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    )

  add_dependencies(External boost)

  set(Boost_INCLUDE_DIRS ${EXTERNAL_BUILD_DIR}/boost/src/boost)

endif()

include_directories(${Boost_INCLUDE_DIRS})

message(STATUS "Boost include dir: ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost libraries: ${Boost_LIBRARIES}")

