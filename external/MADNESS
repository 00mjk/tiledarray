# -*- mode: cmake -*-

###################
# Find MADNESS
###################

find_package(MADNESS COMPONENTS MADworld)

if(MADNESS_FOUND)

  # sanity check: try compiling a simple program
  list(APPEND CMAKE_REQUIRED_INCLUDES ${MADNESS_INCLUDE_DIR})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${MADNESS_LIBRARIES})
  CHECK_CXX_SOURCE_COMPILES(
    "
    #include <world/world.h>
    int main(int argc, char** argv) {
      madness::World& world = madness::initialize(argc, argv);
      return 0;
    }
    "  MADNESS_COMPILES)
  if (NOT MADNESS_COMPILES)
    message(FATAL_ERROR "MADNESS found at ${MADNESS_INCLUDE_DIR}, but could not compile test program")
  endif()

elseif(TA_EXPERT)

  message("** MADNESS was not found or explicitly set")
  message(FATAL_ERROR "** Downloading and building MADNESS is explicitly disabled in EXPERT mode")

else()

  include(ExternalProject)

  # Set source, build, and staging paths for MADNESS
  set(EXTERNAL_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external/src/madness)
  set(EXTERNAL_BUILD_DIR  ${PROJECT_BINARY_DIR}/external/build/madness)
  set(EXTERNAL_STAGE_DIR  ${PROJECT_BINARY_DIR}/external/stage/madness)
  
  set(MADNESS_SVN_URL http://m-a-d-n-e-s-s.googlecode.com/svn/local/trunk)

  message(STATUS "MADNESS not found")
  message("** Will pull MADNESS from ${MADNESS_SVN_URL}")  
    
  # Convert LAPACK_LIBRARIES to compiler arguments for MADNESS configure script
  include(ConvertLibrariesListToCompilerArgs)
  convert_libs_to_compargs(LAPACK_LIBS "${LAPACK_LIBRARIES}")

  if (INTEGER8)
    set (MAD_F77_INT32 no)
  else()
    set (MAD_F77_INT32 yes)
  endif()
  
  ExternalProject_Add(madness
    PREFIX ${EXTERNAL_STAGE_DIR}
   #--Download step--------------
    SVN_REPOSITORY ${MADNESS_SVN_URL}
    SVN_TRUST_CERT 1
   #--Update/Patch step----------
    UPDATE_COMMAND ""
    PATCH_COMMAND aclocal -I ./ && autoconf && autoheader && automake --add-missing
   #--Configure step-------------
    SOURCE_DIR ${EXTERNAL_SOURCE_DIR}
    CONFIGURE_COMMAND ${EXTERNAL_SOURCE_DIR}/configure
      --prefix=${EXTERNAL_STAGE_DIR}
      --with-mpi-thread=multiple
      --disable-optimal
      --enable-dependency-tracking
      --with-fortran-int32=${MAD_F77_INT32}
      MPICXX=${CMAKE_CXX_COMPILER}
      MPICC=${CMAKE_C_COMPILER}
      CPPFLAGS=${CMAKE_CPP_FLAGS}
      CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${CMAKE_CXX_FLAGS}
      CC=${CMAKE_C_COMPILER} CFLAGS=${CMAKE_C_FLAGS}
      F77=${CMAKE_Fortran_COMPILER} FFLAGS=${CMAKE_Fortran_FLAGS}
      LDFLAGS=${CMAKE_EXE_LINKER_FLAGS} LIBS=${LAPACK_LIBS}
   #--Build step-----------------
    BINARY_DIR ${EXTERNAL_BUILD_DIR}
    BUILD_COMMAND make libraries
   #--Install step---------------
    INSTALL_DIR ${EXTERNAL_STAGE_DIR}
    INSTALL_COMMAND make install-libraries
    )
    
  ExternalProject_Add_Step(madness SVN_UPDATE
    COMMAND ${Subversion_SVN_EXECUTABLE} update -r HEAD --force
    COMMENT "Performing update step for 'madness'"
    DEPENDEES configure
    DEPENDERS build
    ALWAYS 1
    WORKING_DIRECTORY ${EXTERNAL_SOURCE_DIR}
    )

  # Set build dependencies and compiler arguments
  add_dependencies(External madness)
  set(MADNESS_LIBRARIES)
  list(APPEND MADNESS_LIBRARIES ${EXTERNAL_STAGE_DIR}/lib/libMADworld.a)
  list(APPEND MADNESS_LIBRARIES ${LAPACK_LIBRARIES})
  set(MADNESS_INCLUDE_DIR ${EXTERNAL_STAGE_DIR}/include)
  
  # Install step copies MADNESS from the staging directory to the TiledArray Install directory
  install(
    DIRECTORY ${EXTERNAL_STAGE_DIR}/include
    DESTINATION ${CMAKE_INSTALL_PREFIX}
    )
  install(
    DIRECTORY ${EXTERNAL_STAGE_DIR}/lib
    DESTINATION ${CMAKE_INSTALL_PREFIX}
    )
    
endif()

include_directories(${MADNESS_INCLUDE_DIRS})

message(STATUS "\tMADNESS libraries: ${MADNESS_LIBRARIES}")
message(STATUS "\tMADNESS include dir: ${MADNESS_INCLUDE_DIR}")
