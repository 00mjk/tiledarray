# -*- mode: cmake -*-

set(MPI_LIBRARIES "")

if (DEFINED MPI_C_COMPILER AND NOT MPI_C_COMPILER)
  message(STATUS "MPI disabled")
else()

  # first, if MPI_C_COMPILER not provided, try the default compilers
  if (NOT DEFINED MPI_C_COMPILER)
    set(MPI_C_COMPILER ${CMAKE_C_COMPILER})
    set(MPI_CXX_COMPILER ${CMAKE_CXX_COMPILER})
    set(MPI_Fortran_COMPILER ${CMAKE_Fortran_COMPILER})
    find_package(MPI)
    if (MPI_FOUND) # don't need special flags
      set(HAVE_MPI TRUE)
      option(ALWAYS_USE_MPI "Always use MPI" TRUE)
    endif()
  endif()
  
  # if MPI_C_COMPILER was provided, or the default compilers are not capable of MPI
  # search for MPI again; if MPI_C_COMPILER is not given this will look for mpicc in PATH, etc.
  if (NOT MPI_FOUND)
    find_package(MPI)
  
    if (NOT MPI_FOUND)
      message(ERROR "MPI not found")
    else()
      set(HAVE_MPI TRUE)
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_LINKER_FLAGS}")

      include_directories(${MPI_INCLUDE_PATH})

      list(APPEND CMAKE_REQUIRED_INCLUDES ${MPI_INCLUDE_PATH})
      list(APPEND CMAKE_REQUIRED_LIBRARIES ${MPI_LIBRARIES})

      message(STATUS "MPI_LIBRARIES: ${MPI_LIBRARIES}")
      message(STATUS "MPI_LINKER_FLAGS: ${MPI_LINKER_FLAGS}")

      option(ALWAYS_USE_MPI "Always use MPI" TRUE)
    endif()  
  endif()
  
endif()
