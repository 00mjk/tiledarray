# -*- mode: cmake -*-

if(NOT MPI_DISABLED)
  if(DEFINED MPI_C_COMPILER AND MPI_C_COMPILER)

    # Use the MPI compiler provided by the user to check for MPI support
    find_package(MPI QUIET)

    if(NOT MPI_FOUND)
      message(FATAL_ERROR "${MPI_C_COMPILER} does not appear to be a working MPI C compiler")
    endif(NOT MPI_FOUND)
  
  else(DEFINED MPI_C_COMPILER AND MPI_C_COMPILER)

    # Try to use C and C++ compilers to detect MPI support.
    set(MPI_C_COMPILER ${CMAKE_C_COMPILER})
    set(MPI_CXX_COMPILER ${CMAKE_CXX_COMPILER})
    find_package(MPI QUIET)

    if (NOT MPI_FOUND)
      # Try to detect standard MPI-compiler wrappers in the path.
      # Clear the cached variables before doing the search again.
      foreach (lang _C_ _CXX_ _)
        unset(MPI${lang}FOUND CACHE)
        unset(MPI${lang}COMPILER CACHE)
        unset(MPI${lang}COMPILE_FLAGS CACHE)
        unset(MPI${lang}INCLUDE_PATH CACHE)
        unset(MPI${lang}LINK_FLAGS CACHE)
        unset(MPI${lang}LIBRARIES CACHE)
      endforeach()
      unset(MPIEXEC CACHE)
      unset(MPIEXEC_NUMPROC_FLAG CACHE)
      unset(MPIEXEC_PREFLAGS CACHE)
      unset(MPIEXEC_POSTFLAGS CACHE)
      unset(MPI_EXTRA_LIBRARY CACHE)

      find_package(MPI QUIET)
    endif(NOT MPI_FOUND)

  endif(DEFINED MPI_C_COMPILER AND MPI_C_COMPILER)
endif(NOT MPI_DISABLED)

if(MPI_C_FOUND)

  message(STATUS "Using MPI compiler settings from ${MPI_C_COMPILER}")
  
  # Set compiler flags using the MPI C compiler

  list(APPEND CMAKE_REQUIRED_INCLUDES ${MPI_C_INCLUDE_PATH})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${MPI_C_LIBRARIES})
    
  # Set the various flags for MPI
  include_directories(${MPI_C_INCLUDE_PATH})
  if(MPI_C_COMPILE_FLAGS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MPI_C_COMPILE_FLAGS}")
  endif(MPI_C_COMPILE_FLAGS)
  list(APPEND LINK_LIBRARIES ${MPI_C_LIBRARIES})
  if(MPI_C_LINKER_FLAGS)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${MPI_C_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MPI_C_LINKER_FLAGS}")
    set(STATIC_LIBRARY_FLAGS "${STATIC_LIBRARY_FLAGS} ${MPI_C_LINKER_FLAGS}")
  endif(MPI_C_LINKER_FLAGS)
  
  message(STATUS "\tMPI include path: ${MPI_C_INCLUDE_PATH}")
  message(STATUS "\tMPI compile flags: ${MPI_C_COMPILE_FLAGS}")
  message(STATUS "\tMPI libraries: ${MPI_C_LIBRARIES}")
  message(STATUS "\tMPI linker flags: ${MPI_C_LINKER_FLAGS}")
  
elseif(MPI_CXX_FOUND)

  message(STATUS "Using MPI compiler settings from ${MPI_CXX_COMPILER}")
  
  # Set compiler flags using the MPI C++ compiler

  list(APPEND CMAKE_REQUIRED_INCLUDES ${MPI_CXX_INCLUDE_PATH})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${MPI_CXX_LIBRARIES})
    
  # Set the various flags for MPI
  include_directories(${MPI_CXX_INCLUDE_PATH})
  if(MPI_CXX_COMPILE_FLAGS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS}")
  endif(MPI_CXX_COMPILE_FLAGS)
  list(APPEND LINK_LIBRARIES ${MPI_CXX_LIBRARIES})
  if(MPI_CXX_LINKER_FLAGS)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${MPI_CXX_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MPI_CXX_LINKER_FLAGS}")
    set(STATIC_LIBRARY_FLAGS "${STATIC_LIBRARY_FLAGS} ${MPI_CXX_LINKER_FLAGS}")
  endif(MPI_CXX_LINKER_FLAGS)

  message(STATUS "\tMPI include path: ${MPI_CXX_INCLUDE_PATH}")
  message(STATUS "\tMPI compile flags: ${MPI_CXX_COMPILE_FLAGS}")
  message(STATUS "\tMPI libraries: ${MPI_CXX_LIBRARIES}")
  message(STATUS "\tMPI linker flags: ${MPI_CXX_LINKER_FLAGS}")
  
else()

  message(STATUS "WARNING: A working MPI compiler was not found; MPI will be disabled.")

endif()
