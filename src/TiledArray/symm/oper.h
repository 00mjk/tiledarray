/*
 *  This file is a part of TiledArray.
 *  Copyright (C) 2015  Virginia Tech
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Edward Valeev
 *  Department of Chemistry, Virginia Tech
 *
 *  symm/oper.h
 *  Oct 21, 2015
 *
 */

#ifndef TILEDARRAY_SYMM_DENSE_OPER_H__INCLUDED
#define TILEDARRAY_SYMM_DENSE_OPER_H__INCLUDED

namespace TiledArray {

  namespace symmetry {

    template <typename T> const T& identity();

    /// IKGroupOperator is an operator from group which generated by negation ("I") and complex conjugation ("K") operators

    /// This group describes symmetries of tensors described by TiledArray "out of the box". (Support for
    /// more complex symmetries, including nonabelian, can also be implemented by the user).
    /// In addition to I and K, IKGroup includes identity ("E") and the product of I and K ("IK").
    /// IK group is isomorphic to \f$ D_2 \f$ group in complex plane, and to Klein group / Vierergruppe.
    class IKGroupOperator {
        enum operator_type {_E = 0, _I = 1, _K = 2, _IK = 3}; // bitwise encoding; multiply by XOR

        IKGroupOperator(operator_type t) : type_(t) {}

      public:
        IKGroupOperator() : type_(_E) {}
        IKGroupOperator(const IKGroupOperator&) = default;

        static IKGroupOperator E()  { return IKGroupOperator{_E};  }
        static IKGroupOperator I()  { return IKGroupOperator{_I};  }
        static IKGroupOperator K()  { return IKGroupOperator{_K};  }
        static IKGroupOperator IK() { return IKGroupOperator{_IK}; }

      private:
        operator_type type_;

        friend IKGroupOperator operator*(const IKGroupOperator&, const IKGroupOperator&);
        friend bool operator==(const IKGroupOperator&, const IKGroupOperator&);
    };

    /// computes A * B
    inline IKGroupOperator operator*(const IKGroupOperator& A, const IKGroupOperator& B) {
      return IKGroupOperator(static_cast<IKGroupOperator::operator_type>(A.type_ ^ B.type_));
    }
    /// compares A and B
    inline bool operator==(const IKGroupOperator& A, const IKGroupOperator& B) {
      return A.type_ == B.type_;
    }

    template <> inline const IKGroupOperator& identity<IKGroupOperator>() {
      static auto i = IKGroupOperator::E();
      return i;
    }

  } // namespace TiledArray::symmetry
} // namespace TiledArray

#endif // TILEDARRAY_SYMM_DENSE_OPER_H__INCLUDED
